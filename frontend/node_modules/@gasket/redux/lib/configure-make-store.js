"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = configureMakeStore;
exports.prepareReducer = prepareReducer;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _redux = require("redux");
var _reduxThunk = _interopRequireDefault(require("redux-thunk"));
var _reduxLogger = require("redux-logger");
var _log = _interopRequireDefault(require("@gasket/log"));
var _placeholderReducers = _interopRequireDefault(require("./placeholder-reducers"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } /// <reference types="@gasket/plugin-log" />
/**
 * Compose the reducer
 * @type {import('./index').prepareReducer}
 */
function prepareReducer(allReducers, rootReducer) {
  var combinedReducer = Object.keys(allReducers).length ? (0, _redux.combineReducers)(allReducers) : function () {
    var f = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return f;
  };
  if (rootReducer) {
    return function (state, action) {
      var nextState = rootReducer(state, action);
      // if state results are unchanged, continue to combined reducers
      if (nextState === state) {
        return combinedReducer(state, action);
      }
      return nextState;
    };
  }
  return combinedReducer;
}

/**
 * Set up redux store configuration and return a makeStore function
 * @type {import('./index').configureMakeStore}
 */
function configureMakeStore() {
  var makeStoreOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var postCreate = arguments.length > 1 ? arguments[1] : undefined;
  var _makeStoreOptions$thu = makeStoreOptions.thunkMiddleware,
    thunkMiddleware = _makeStoreOptions$thu === void 0 ? _reduxThunk["default"] : _makeStoreOptions$thu,
    _makeStoreOptions$mid = makeStoreOptions.middleware,
    middleware = _makeStoreOptions$mid === void 0 ? [] : _makeStoreOptions$mid,
    _makeStoreOptions$log = makeStoreOptions.logging,
    logging = _makeStoreOptions$log === void 0 ? false : _makeStoreOptions$log,
    _makeStoreOptions$enh = makeStoreOptions.enhancers,
    enhancers = _makeStoreOptions$enh === void 0 ? [function (f) {
      return f;
    }] : _makeStoreOptions$enh,
    _makeStoreOptions$red = makeStoreOptions.reducers,
    reducers = _makeStoreOptions$red === void 0 ? {} : _makeStoreOptions$red,
    rootReducer = makeStoreOptions.rootReducer,
    _makeStoreOptions$ini = makeStoreOptions.initialState,
    initialState = _makeStoreOptions$ini === void 0 ? {} : _makeStoreOptions$ini;
  var baseMiddleware = [thunkMiddleware];

  /**
   * Wrapper for store create to create instance with SSR and to hydrate in
   * browser.
   * @type {import('./index').MakeStoreFn}
   */
  function makeStore() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var req = options.req,
      _options$logger = options.logger,
      logger = _options$logger === void 0 ? new _log["default"]() : _options$logger;

    // Use existing redux store if it has been already been instantiated by
    // redux-plugin
    if (req && req.store) {
      return req.store;
    }
    var allMiddleware = [].concat(baseMiddleware, (0, _toConsumableArray2["default"])(middleware));
    if (logging) {
      allMiddleware.push((0, _reduxLogger.createLogger)({
        collapsed: true,
        logger: logger
      }));
    }
    var composer = typeof window !== 'undefined' &&
    // @ts-ignore - redux devtools extension
    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || _redux.compose;
    var enhancer = composer.apply(void 0, [_redux.applyMiddleware.apply(void 0, (0, _toConsumableArray2["default"])(allMiddleware))].concat((0, _toConsumableArray2["default"])(enhancers)));
    var preloadedState = _objectSpread(_objectSpread({}, initialState), state);

    /** @type {Record<string, import('redux').Reducer>} */
    var allReducers = _objectSpread(_objectSpread({}, reducers || {}), (0, _placeholderReducers["default"])(reducers, preloadedState));
    var reducer = prepareReducer(allReducers, rootReducer);
    var store = (0, _redux.createStore)(reducer, _objectSpread(_objectSpread({}, initialState), state), enhancer);
    if (postCreate) postCreate(store);
    return store;
  }
  return makeStore;
}