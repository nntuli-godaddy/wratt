"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  GasketDataScript: true,
  withGasketData: true
};
exports.GasketDataScript = void 0;
exports.withGasketData = withGasketData;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _react = _interopRequireDefault(require("react"));
var _document = require("next/document");
var _htmlescape = _interopRequireDefault(require("htmlescape"));
var _useGasketData = require("./use-gasket-data");
Object.keys(_useGasketData).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _useGasketData[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _useGasketData[key];
    }
  });
});
var _withGasketDataProvider = require("./with-gasket-data-provider");
Object.keys(_withGasketDataProvider).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _withGasketDataProvider[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _withGasketDataProvider[key];
    }
  });
});
var __jsx = _react["default"].createElement;
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
/**
 * Renders a script tag with JSON gasketData
 * @type {import('./index').GasketDataScript}
 */
var GasketDataScript = function GasketDataScript(_ref) {
  var data = _ref.data;
  return __jsx("script", {
    id: "GasketData",
    type: "application/json",
    dangerouslySetInnerHTML: {
      __html: (0, _htmlescape["default"])(data)
    }
  });
};
exports.GasketDataScript = GasketDataScript;
/**
 * Make a wrapper to extend the Next.js Document, injecting a script with the
 * `gasketData` from the response object.
 * @type {import('./index').withGasketData}
 */
function withGasketData() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var _options$index = options.index,
    index = _options$index === void 0 ? -1 : _options$index;

  /**
   * To avoid polluting <head/>, we want to render our JSON in the <body/> but
   * before our other scripts so that it is available to query. In a basic
   * Next.js app, this is between the Main and NextScript tags.*
   * @param {JSX.Element[]} bodyChildren - Children of body element
   * @returns {number} index
   * @private
   */
  function lookupIndex(bodyChildren) {
    var lookups = [
    // Try to find <Main/> and insert after
    function () {
      return bodyChildren.findIndex(function (o) {
        return o.type === _document.Main;
      }) + 1 || -1;
    },
    // Otherwise, try to find the first <script/> or <NextScript/>
    function () {
      return bodyChildren.findIndex(function (o) {
        return o.type === 'script' || o.type === _document.NextScript;
      });
    },
    // Otherwise, assume <Main/> is child of the first element
    function () {
      return 1;
    }];
    return lookups.reduce(function (acc, cur) {
      return acc !== -1 ? acc : cur();
    }, index);
  }
  return function (DocumentClass) {
    return /*#__PURE__*/function (_DocumentClass) {
      (0, _inherits2["default"])(GasketDocument, _DocumentClass);
      var _super = _createSuper(GasketDocument);
      function GasketDocument() {
        (0, _classCallCheck2["default"])(this, GasketDocument);
        return _super.apply(this, arguments);
      }
      (0, _createClass2["default"])(GasketDocument, [{
        key: "render",
        value: function render() {
          var html = (0, _get2["default"])((0, _getPrototypeOf2["default"])(GasketDocument.prototype), "render", this).call(this);
          var gasketData = this.props.gasketData;
          var htmlChildren = _react["default"].Children.toArray(html.props.children);
          // @ts-ignore
          var bodyIdx = htmlChildren.findIndex(function (t) {
            return t.type === 'body';
          });
          var body = htmlChildren[bodyIdx];
          // @ts-ignore
          var bodyChildren = _react["default"].Children.toArray(body.props.children);
          bodyChildren.splice(
          // @ts-ignore
          lookupIndex(bodyChildren), 0, __jsx(GasketDataScript, {
            data: gasketData
          }));
          // @ts-ignore
          htmlChildren[bodyIdx] = /*#__PURE__*/_react["default"].cloneElement.apply(_react["default"], [body, {}].concat((0, _toConsumableArray2["default"])(bodyChildren)));
          return /*#__PURE__*/_react["default"].cloneElement.apply(_react["default"], [html, {}].concat((0, _toConsumableArray2["default"])(htmlChildren)));
        }
      }], [{
        key: "getInitialProps",
        value: ( /**  @type {import('./index').GasketDocumentGetInitialProps} */function () {
          var _getInitialProps = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(ctx) {
            var _ref2, _ref2$locals, _ref2$locals$gasketDa, gasketData, initialProps;
            return _regenerator["default"].wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    _ref2 = ctx.res || {}, _ref2$locals = _ref2.locals;
                    _ref2$locals = _ref2$locals === void 0 ? {} : _ref2$locals;
                    _ref2$locals$gasketDa = _ref2$locals.gasketData, gasketData = _ref2$locals$gasketDa === void 0 ? {} : _ref2$locals$gasketDa;
                    _context.next = 5;
                    return DocumentClass.getInitialProps(ctx);
                  case 5:
                    initialProps = _context.sent;
                    return _context.abrupt("return", _objectSpread(_objectSpread({}, initialProps), {}, {
                      gasketData: gasketData
                    }));
                  case 7:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          }));
          function getInitialProps(_x) {
            return _getInitialProps.apply(this, arguments);
          }
          return getInitialProps;
        }())
      }]);
      return GasketDocument;
    }(DocumentClass);
  };
}