"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _diagnostics = _interopRequireDefault(require("diagnostics"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
/**
 * Log utility for client-side usage. Displays scoped messages in the console.
 *
 * @class Log
 * @public
 */
var Log = exports["default"] = /*#__PURE__*/function () {
  /**
   * Setup log instances for each level.
   *
   * @param {Object} options configuration.
   * @private
   */
  function Log() {
    var _this = this;
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      level = _ref.level,
      _ref$levels = _ref.levels,
      levels = _ref$levels === void 0 ? Log.levels : _ref$levels,
      namespace = _ref.namespace,
      prod = _ref.prod;
    _classCallCheck(this, Log);
    this.namespace = Array.isArray(namespace) ? namespace : [namespace];
    this.level = ~levels.indexOf(level) ? level : 'info';
    levels.forEach(function (lvl) {
      _this[lvl] = (0, _diagnostics["default"])(['gasket', lvl].concat(_toConsumableArray(_this.namespace)).filter(Boolean).join(':'), {
        force: Boolean(prod)
      });
    });
  }

  /**
   * Generic log function.
   *
   * @param {Array} ...args Additional arguments.
   * @returns {Log} fluent interface.
   * @public
   */
  _createClass(Log, [{
    key: "log",
    value: function log() {
      this[this.level].apply(this, arguments);
      return this;
    }
  }]);
  return Log;
}();
/**
* Prefix for all messages send to fluentd.
* TODO (@swaagie) add support for sending aggregated messages.
*
* @type {String}
*/
Log.prefix = 'client';

/**
* Log levels comparable to winston's syslog levels.
* https://github.com/winstonjs/triple-beam/blob/master/config/syslog.js
*
* @type {Object}
*/
Log.levels = ['debug', 'info', 'notice', 'warning', 'error', 'crit', 'alert', 'emerg'];